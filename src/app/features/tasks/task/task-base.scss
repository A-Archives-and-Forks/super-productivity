:host {
  --task-button-spacer: 1px;
  --play-icon-size: 22px;
  --task-icon-size: 40px;
  --mini-badge-size: var(--s2);

  display: block;
  position: relative;
  color: var(--text-color);
}

.inner-wrapper {
  position: relative;
  // NOTE: -1 px because we move the box slightly up
  padding: calc(var(--task-inner-padding-top-bottom) - 1px) 0
    var(--task-inner-padding-top-bottom);
  margin-bottom: 0;
}

.box {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 1px;
  top: 1px;
  transition: var(--transition-standard);
  transition-property: transform, box-shadow;
  border: 1px solid transparent;
  background: var(--task-c-bg);

  :host:first-child > .inner-wrapper > & {
    border-top-left-radius: var(--task-border-radius);
    border-top-right-radius: var(--task-border-radius);
  }

  :host:last-child > .inner-wrapper > & {
    border-bottom-left-radius: var(--task-border-radius);
    border-bottom-right-radius: var(--task-border-radius);
  }

  :host:focus.mobile-highlight > .inner-wrapper > & {
    border-color: var(--palette-primary-400);
    border-width: 1px;
    border-style: solid !important;
  }

  // Responsive adjustments for selected/current states
  :host.isSelected.isSelected > .inner-wrapper > &,
  :host.isSelected.isCurrent.isCurrent.isCurrent.isCurrent & {
    @include mq(xs) {
      right: -34px;
    }
    @include mq(md) {
      right: -234px;
    }
    @include mq(xl) {
      right: calc(-1 * var(--task-border-radius));
    }
  }
}

.sub-tasks {
  margin: var(--s) var(--s) var(--s) var(--s3);
  position: relative;

  @include smallMainContainer {
    margin: var(--s) var(--s) var(--s) var(--s3);
    position: relative;
  }

  @include mq(xs) {
    margin: var(--s) var(--s) var(--s) var(--s5);
  }

  ::ng-deep .box {
    @include lightTheme {
      border-color: var(--extra-border-color);
      bottom: 0;
      top: -1px;
    }

    @include darkTheme {
      box-shadow: var(--whiteframe-shadow-1dp);
      background: var(--sub-task-c-bg);
    }
  }
}

:host-context(.isDarkTheme) ::ng-deep .isDone.isDone .box {
  background: var(--sub-task-c-bg-done);
}

.first-line {
  position: relative;
  display: flex;
  align-items: stretch;
  flex-wrap: nowrap;
  user-select: none;
  justify-content: space-between;
  min-height: var(--task-first-line-min-height);
  touch-action: pan-y;

  @include mq(xs, max) {
    flex-wrap: wrap;
    justify-content: flex-end;
  }
}

.title-and-left-btns-wrapper {
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: center;
  min-height: 36px;
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: 70%;

  @include mq(xs, max) {
    flex-basis: 50%;
  }

  @include isDoneForFirstLine {
    opacity: var(--task-is-done-dim-opacity);
  }
}

// SWIPE BLOCKS
.block-left,
.block-right {
  pointer-events: none;
  color: var(--palette-primary-contrast-500);
  position: absolute;
  bottom: 2px;
  top: 1px;
  width: 0;
  z-index: var(--z-swipe-block);
  transition: var(--transition-standard);
  border-radius: var(--task-border-radius);
  overflow: hidden;

  &.isActive {
    background-color: var(--c-accent);
  }

  mat-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scaleX(1);
  }
}

.block-left {
  left: 0;
}

.block-right {
  right: 0;
}

// Task and title wrapper
.title-and-tags-wrapper {
  flex-grow: 1;
  flex-shrink: 1;
  min-width: 180px;

  > * {
    @include touchOnlyDevice {
      pointer-events: none;
    }
  }

  // note: we use .tags-container, since we don't want margins for an empty list
  ::ng-deep .tags-container {
    // to match task title padding
    margin-left: 6px;
    margin-bottom: 5px;
  }
}

.parent-title {
  display: flex;
  align-items: center;
  padding-left: var(--s);
  padding-top: var(--s-half);
  margin-bottom: -2px;

  .title {
    font-size: 12px;
    text-overflow: ellipsis;
  }
}

.mini-badge {
  line-height: var(--mini-badge-size);
  width: var(--mini-badge-size);
  height: var(--mini-badge-size);
  font-size: 12px;
  position: absolute;
  right: 0;
  bottom: 0;
  border-radius: 50%;
  text-align: center;
}

.isPreventPointerEventsWhilePanning {
  * {
    user-select: none !important;
    pointer-events: none !important;
    transition: none !important;
  }
}
