@use 'styles/globals' as *;

:host {
  display: flex !important;
  align-items: stretch;
  position: relative;
  width: 100%;

  button:first-of-type {
    white-space: nowrap;
    overflow: hidden;
    flex: 1;
    min-width: 0;

    .text {
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .badge {
      display: none;
    }
  }

  .additional-btn {
    flex-shrink: 0;
    width: 40px !important;
    min-width: 40px !important;
  }

  &.hasTasks {
    button .badge {
      display: block;
      z-index: 10;
      position: absolute;
      line-height: 1;
      right: 100%;
      text-align: center;
      bottom: 6px;
      font-size: 10px;
      min-width: 18px;
      padding: 0 4px 0;
      border: 1px solid var(--extra-border-color);
      border-radius: 12px;
      margin-right: -49px;

      // avoid affecting drag handle
      pointer-events: none;

      border-color: var(--extra-border-color);
      background: var(--bg-lighter);
    }
  }

  &.isHidden {
    display: none !important;
  }
}

:host.isActiveContext button {
  font-weight: normal;

  &.isActiveRoute {
    font-weight: bold;
    color: var(--palette-primary-800);

    mat-icon {
      color: var(--palette-primary-800);
    }
  }
}

body.isDarkTheme :host.isActiveContext button.isActiveRoute {
  color: var(--c-primary);

  mat-icon {
    color: var(--c-primary);
  }
}

// Styling when used inside magic-side-nav
:host.variant-nav {
  .g-multi-btn-wrapper {
    background-color: transparent;
  }

  button[mat-menu-item] {
    color: var(--sidebar-text);
    padding: var(--s) var(--s2);
    font-size: 14px;

    &:hover {
      background-color: var(--sidebar-hover);
    }

    &.isActiveRoute {
      background-color: var(--sidebar-active);
      color: var(--sidebar-active-text);
    }
  }

  .additional-btn {
    color: var(--sidebar-text-secondary);

    &:hover {
      background-color: var(--sidebar-hover);
      color: var(--sidebar-text);
    }
  }
}

.drag-handle {
  /* Firefox 1.5-26 */
  position: relative;
  @include grabCursor();

  &:after {
    content: '';
    position: absolute;
    top: calc(-1 * var(--s));
    left: calc(-1 * var(--s));
    right: calc(-1 * var(--s));
    bottom: calc(-1 * var(--s));
  }
}
